# -*- coding: utf-8 -*-
"""sales-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hOZ-lDn4wb2WOTC9XBILywzY3TDXbkKE
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('train.csv')  # Make sure it matches the file name
df.head()

df.info()
df.isnull().sum()

df['Item_Weight'].fillna(df['Item_Weight'].mean(), inplace=True)
df['Outlet_Size'].fillna(df['Outlet_Size'].mode()[0], inplace=True)

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
cols = ['Item_Fat_Content', 'Item_Type', 'Outlet_Identifier',
        'Outlet_Size', 'Outlet_Location_Type', 'Outlet_Type']

for col in cols:
    df[col] = le.fit_transform(df[col])

correlation_matrix = df.corr(numeric_only=True)
plt.figure(figsize=(12,8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

from sklearn.model_selection import train_test_split

X = df.drop(['Item_Identifier', 'Item_Outlet_Sales'], axis=1)
y = df['Item_Outlet_Sales']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("R2 Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

# Fill missing Item_Weight using mean based on Item_Identifier
df['Item_Weight'] = df.groupby('Item_Identifier')['Item_Weight'].transform(lambda x: x.fillna(x.mean()))
df['Outlet_Size'].fillna(df['Outlet_Size'].mode()[0], inplace=True)

df['Item_Fat_Content'] = df['Item_Fat_Content'].replace({
    'LF':'Low Fat', 'low fat':'Low Fat', 'reg':'Regular'
})

# Years of operation
df['Outlet_Age'] = 2025 - df['Outlet_Establishment_Year']

# Simplify item categories
df['Item_Category'] = df['Item_Identifier'].apply(lambda x: x[:2])
df['Item_Category'] = df['Item_Category'].map({'FD':'Food', 'NC':'Non-Consumable', 'DR':'Drinks'})

# Convert 'Non-Consumable' fat content to 'None'
df.loc[df['Item_Category'] == 'Non-Consumable', 'Item_Fat_Content'] = 'None'

from sklearn.preprocessing import LabelEncoder

cols = ['Item_Fat_Content', 'Outlet_Location_Type', 'Outlet_Size', 'Outlet_Type', 'Item_Type', 'Item_Category', 'Outlet_Identifier']
le = LabelEncoder()
for col in cols:
    df[col] = df[col].astype(str)
    df[col] = le.fit_transform(df[col])

from sklearn.preprocessing import StandardScaler

features = df.drop(['Item_Identifier', 'Item_Outlet_Sales'], axis=1)
target = df['Item_Outlet_Sales']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(features)

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
import numpy as np

X_train, X_test, y_train, y_test = train_test_split(X_scaled, target, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
model.fit(X_train, y_train)

preds = model.predict(X_test)
print("R2 Score:", r2_score(y_test, preds))
print("RMSE:", np.sqrt(mean_squared_error(y_test, preds)))